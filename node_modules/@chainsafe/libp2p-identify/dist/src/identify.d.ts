import { Identify as IdentifyMessage } from './pb/message.js';
import type { Identify as IdentifyInterface, IdentifyComponents, IdentifyInit } from './index.js';
import type { IdentifyResult, AbortOptions, Connection, Startable } from '@libp2p/interface';
import type { IncomingStreamData } from '@libp2p/interface-internal';
export declare class Identify implements Startable, IdentifyInterface {
    #private;
    private readonly identifyProtocolStr;
    readonly host: {
        protocolVersion: string;
        agentVersion: string;
    };
    private started;
    private readonly timeout;
    private readonly peerId;
    private readonly peerStore;
    private readonly registrar;
    private readonly addressManager;
    private readonly maxInboundStreams;
    private readonly maxOutboundStreams;
    private readonly maxIdentifyMessageSize;
    private readonly maxObservedAddresses;
    private readonly events;
    private readonly runOnTransientConnection;
    private readonly log;
    constructor(components: IdentifyComponents, init?: IdentifyInit);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    _identify(connection: Connection, options?: AbortOptions): Promise<IdentifyMessage>;
    identify(connection: Connection, options?: AbortOptions): Promise<IdentifyResult>;
    /**
     * Sends the `Identify` response with the Signed Peer Record
     * to the requesting peer over the given `connection`
     */
    _handleIdentify(data: IncomingStreamData): Promise<void>;
}
//# sourceMappingURL=identify.d.ts.map